// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: whatsapp_stickers.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct WhatsappStickers_SendToWhatsAppPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String = String()

  var name: String = String()

  var publisher: String = String()

  var trayImageFileName: String = String()

  var publisherWebsite: String = String()

  var privacyPolicyWebsite: String = String()

  var licenseAgreementWebsite: String = String()

  var stickers: Dictionary<String,WhatsappStickers_SendToWhatsAppPayload.Stickers> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Stickers {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var all: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "whatsapp_stickers"

extension WhatsappStickers_SendToWhatsAppPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendToWhatsAppPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .same(proto: "name"),
    3: .same(proto: "publisher"),
    4: .same(proto: "trayImageFileName"),
    5: .same(proto: "publisherWebsite"),
    6: .same(proto: "privacyPolicyWebsite"),
    7: .same(proto: "licenseAgreementWebsite"),
    8: .same(proto: "stickers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identifier)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.publisher)
      case 4: try decoder.decodeSingularStringField(value: &self.trayImageFileName)
      case 5: try decoder.decodeSingularStringField(value: &self.publisherWebsite)
      case 6: try decoder.decodeSingularStringField(value: &self.privacyPolicyWebsite)
      case 7: try decoder.decodeSingularStringField(value: &self.licenseAgreementWebsite)
      case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,WhatsappStickers_SendToWhatsAppPayload.Stickers>.self, value: &self.stickers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.publisher.isEmpty {
      try visitor.visitSingularStringField(value: self.publisher, fieldNumber: 3)
    }
    if !self.trayImageFileName.isEmpty {
      try visitor.visitSingularStringField(value: self.trayImageFileName, fieldNumber: 4)
    }
    if !self.publisherWebsite.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherWebsite, fieldNumber: 5)
    }
    if !self.privacyPolicyWebsite.isEmpty {
      try visitor.visitSingularStringField(value: self.privacyPolicyWebsite, fieldNumber: 6)
    }
    if !self.licenseAgreementWebsite.isEmpty {
      try visitor.visitSingularStringField(value: self.licenseAgreementWebsite, fieldNumber: 7)
    }
    if !self.stickers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,WhatsappStickers_SendToWhatsAppPayload.Stickers>.self, value: self.stickers, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WhatsappStickers_SendToWhatsAppPayload, rhs: WhatsappStickers_SendToWhatsAppPayload) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs.name != rhs.name {return false}
    if lhs.publisher != rhs.publisher {return false}
    if lhs.trayImageFileName != rhs.trayImageFileName {return false}
    if lhs.publisherWebsite != rhs.publisherWebsite {return false}
    if lhs.privacyPolicyWebsite != rhs.privacyPolicyWebsite {return false}
    if lhs.licenseAgreementWebsite != rhs.licenseAgreementWebsite {return false}
    if lhs.stickers != rhs.stickers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WhatsappStickers_SendToWhatsAppPayload.Stickers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = WhatsappStickers_SendToWhatsAppPayload.protoMessageName + ".Stickers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "all"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.all)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.all.isEmpty {
      try visitor.visitRepeatedStringField(value: self.all, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WhatsappStickers_SendToWhatsAppPayload.Stickers, rhs: WhatsappStickers_SendToWhatsAppPayload.Stickers) -> Bool {
    if lhs.all != rhs.all {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
